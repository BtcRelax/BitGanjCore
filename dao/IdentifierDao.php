<?php
namespace BtcRelax\Dao;

final class IdentifierDao  extends BaseDao {
    
    public function save(\BtcRelax\Model\Identicator $pIdenticator) {
        if (empty($pIdenticator->getIdIdentity())) {
            return $this->insert($pIdenticator);
        }
        return $this->update($pIdenticator);
    }
    
    public function insert(\BtcRelax\Model\Identicator $newIdent)
    {
                $sql = 'INSERT INTO `Idetities` (`CreateDate`,`idIdentity`,`IdentTypeCode`,`IdentityKey`,`EndDate`, `idCustomer`)
                    VALUES ( :CreateDate, :idIdentity, :IdentTypeCode, :IdentityKey, :EndDate, :idCustomer);';
                return $this->execute($sql, $newIdent);
    }
    
    public function getParams(\BtcRelax\Model\Identicator $vIdent) {
        $params = [
                    ':IdentTypeCode' => $vIdent->getIdentTypeCode(),
                    ':IdentityKey' => $vIdent->getIdentityKey(),
                    ':idCustomer' => $vIdent->getIdCustomer(),
                    ':idIdentity' => $vIdent->getIdIdentity()
                ];
        if (!empty($vIdent->getEndDate())) 
            { $params += [':EndDate' => self::formatDateTime($vIdent->getEndDate())];}
            else { $params += [':EndDate' => null]; }
        if (empty($vIdent->getIdIdentity())) {
                $params += [':CreateDate' => self::formatDateTime(new \DateTime())];
        }
        return $params;
    }
    
    public function execute($sql, \BtcRelax\Model\Identicator $vIdent) {
        $statement = $this->getDb()->prepare($sql);
                $this->executeStatement($statement, $this->getParams($vIdent));
                if (!$vIdent->getIdIdentity()) {
                    $newIdentId = $this->getDb()->lastInsertId();
                    return $this->findById($newIdentId);
                }
                if (!$statement->rowCount()) {
                    throw new NotFoundException('Identificator with ID "' . $vIdent->getIdIdentity() . '" does not exist.');
                }
                return $vIdent;
    }
               
    //put your code here
    public function getFindSql(\BtcRelax\Dao\IdentifierSearchCriteria $vSearch )  {
	$sql = 'SELECT CreateDate, idIdentity, IdentTypeCode, IdentityKey,EndDate, idCustomer, Description FROM vwIdentifiers ';
        $orderBy = ' CreateDate  '; $filter = '';
        if (!is_null($vSearch->getIdentityKey())) { $filter = $this->addToFilter($filter, sprintf('IdentityKey = \'%s\'',$vSearch->getIdentityKey()));}
        if (!is_null($vSearch->getIdentTypeCode())) { $filter = $this->addToFilter($filter, sprintf('IdentTypeCode = \'%s\'',$vSearch->getIdentTypeCode()));}
        if (!is_null($vSearch->getIdCustomer())) { $filter = $this->addToFilter($filter, sprintf('idCustomer = \'%s\'',$vSearch->getIdCustomer())); }

        $sql .= sprintf('%s ORDER BY %s',$filter , $orderBy);  
        $msg = sprintf('Final query generated by IdentifierDao is: %s',$sql );
        \BtcRelax\Log::general($msg, \BtcRelax\Log::DEBUG);
        return $sql;
    }
    
    public function find(IdentifierSearchCriteria $search = null) {
        $result = [];
	foreach ($this->query($this->getFindSql($search)) as $row) {
            $ident = $this->createTypedIdentifier($row);
            \BtcRelax\Mapping\IdentifierMapper::map($ident, $row);
            array_push($result, $ident); 
        }
	return $result;
    }
    
    
    public function findById($id) {
	$result=false;
                $row = $this->query(sprintf("SELECT CreateDate, idIdentity, IdentTypeCode, IdentityKey,EndDate, idCustomer, Description FROM vwIdentifiers WHERE `idIdentity` = '%s' LIMIT 1 ", $id))->fetch();
                if (!$row) { $result=null;}
                else { 
                    $vIdent = $this->createTypedIdentifier($row);
                    \BtcRelax\Mapping\IdentifierMapper::map($vIdent, $row);
                    $result = $vIdent; }
                return $result;
    }
    
    private function createTypedIdentifier($row)
    {
        $vIdentType = $row['IdentTypeCode'];
        $result = \BtcRelax\Model\Identicator::createInstanceByType($vIdentType);
        return $result;
    }
     
}
